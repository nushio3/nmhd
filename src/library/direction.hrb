#pragma once
#include <iostream>
/*"
  require 'nushio_script/crystal'
  
  XYZi{|dir, ctr| puts "*/
struct #{dir}Axis;
struct #{dir}Half;
/*" }
  
  XYZi{|dir, ctr| puts "*/
struct #{dir}Axis
{
  enum { mask = #{BitMask(ctr)} };
  typedef #{dir}Half Half;
  typedef #{Prev(dir)}Axis Prev;
  typedef #{Next(dir)}Axis Next;
};
struct #{dir}Half
{
  enum { mask = #{BitMask(ctr)} };
  typedef #{dir}Axis Whole;
  typedef #{Prev(dir)}Half Prev;
  typedef #{Next(dir)}Half Next;
};
__device__ #{dir}Axis #{dir};
__device__ #{dir}Half H#{dir};
/*" }
  puts "*/

namespace direction{
template<class T>
__device__ __host__ typename T::Half half(T t) { typename T::Half ret; return ret; }
template<class T>
__device__ __host__ typename T::Whole whole(T t) { typename T::Whole ret; return ret; }
template<class T>
__device__ __host__ typename T::Prev prev(T t) { typename T::Prev ret; return ret; }
template<class T>
__device__ __host__ typename T::Next next(T t) { typename T::Next ret; return ret; }
}

/*
  Triplet : tuple of three object of same type
  (essentially, a three dimensional vector)  */

template <class T>
class Triplet {
public:
  T x_, y_, z_;
  __device__ __host__ Triplet () : x_(), y_(), z_() {}
  __device__ __host__ Triplet (const T& x,const T& y,const T& z) :
    x_(x), y_(y), z_(z) {}

  /*"  Xyz{|dir,cdir| puts "*/
  __device__ __host__
  T &operator[](#{cdir}Axis) { return #{dir}_; }
  __device__ __host__
  const T &operator[](#{cdir}Axis) const { return #{dir}_; }
  /*" }
    puts "*/  

  // vector addition between triplets
  /*"
    ['+', '-'].each{ |op| puts "*/

  __device__ __host__
  Triplet<T> operator#{op} (const Triplet<T> &other) const {
    return Triplet<T>(x_ #{op} other.x_, y_ #{op} other.y_, z_ #{op} other.z_);
  }

  __device__ __host__
  Triplet<T> operator#{op}= (const Triplet<T> &other) {
    x_ #{op}= other.x_; y_ #{op}= other.y_; z_ #{op}= other.z_;
    return *this;
  }
  /*" }
    puts "*/

  // comparison
  __device__ __host__
  bool operator== (const Triplet<T> &other) const {
    return x_ == other.x_ && y_ == other.y_ && z_ == other.z_;
  }

  __device__ __host__
  bool operator!= (const Triplet<T> &other) const {
    return x_ != other.x_ || y_ != other.y_ || z_ != other.z_;
  }
};

// inner and outer product
template<class T>
__device__ __host__ T inner_prod (const Triplet<T> &a, const Triplet<T> &b) {
  return a.x_ * b.x_ +  a.y_ * b.y_ +  a.z_ * b.z_;
}
template<class T>
__device__ __host__ Triplet<T> outer_prod (const Triplet<T> &a, const Triplet<T> &b) {
  return Triplet<T>
    (/*" puts XYZ{|d| "*/
     a[#{Next(d)}] * b[#{Prev(d)}] - a[#{Prev(d)}] * b[#{Next(d)}]
     /*" }.join(',')
       puts "*/);
}

// absolute and norm
template<class T>
__device__ __host__ T norm (const Triplet<T> &a) {
  return inner_prod(a,a);
}

namespace { // triplet function and operators
template<class T>
__device__ __host__ T abs (const Triplet<T> &a) {
  return sqrt(norm(a));
}
template<>
__device__ __host__ float abs (const Triplet<float> &a) {
  return sqrtf(norm(a));
}
}


template <class T>
std::ostream& operator<<(std::ostream& cout, Triplet<T> t) {
  return cout << t.x_ << " " << t.y_ << " " << t.z_;
}
template <class T>
std::istream& operator>>(std::istream& cin, Triplet<T> t) {
  return cin >> t.x_ >> t.y_ >> t.z_;
}




/*
  Triad : tuple of three object of different type */
 

template <class TX, class TY, class TZ>
class Triad {
public:
  TX x_; TY y_; TZ z_;
  __device__ __host__ Triad () : x_(), y_(), z_() {}
  __device__ __host__ Triad (const TX& x,const TY& y,const TZ& z) :
    x_(x), y_(y), z_(z) {}
  
  /*"  Xyz{|dir,cdir| puts "*/
  __device__ __host__
  T#{cdir} &operator[](#{cdir}Axis) { return #{dir}_; }
  __device__ __host__
  const T#{cdir} &operator[](#{cdir}Axis) const { return #{dir}_; }
  /*" }
    puts "*/  

  // vector addition between triplets
  /*"
    ['+', '-'].each{ |op| puts "*/

  __device__ __host__
  Triad<TX,TY,TZ> operator#{op} (const Triad<TX,TY,TZ> &other) const {
    return Triad<TX,TY,TZ>(x_ #{op} other.x_, y_ #{op} other.y_, z_ #{op} other.z_);
  }

  __device__ __host__
  Triad<TX,TY,TZ> operator#{op}= (const Triad<TX,TY,TZ> &other) {
    x_ #{op}= other.x_; y_ #{op}= other.y_; z_ #{op}= other.z_;
    return *this;
  }
  /*" }
    puts "*/

  // comparison
  __device__ __host__
  bool operator== (const Triad<TX,TY,TZ> &other) const {
    return x_ == other.x_ && y_ == other.y_ && z_ == other.z_;
  }

  __device__ __host__
  bool operator!= (const Triad<TX,TY,TZ> &other) const {
    return x_ != other.x_ || y_ != other.y_ || z_ != other.z_;
  }
};


template <class TX, class TY, class TZ>
std::ostream& operator<<(std::ostream& cout, Triad<TX,TY,TZ> t) {
  return cout << t.x_ << " " << t.y_ << " " << t.z_;
}
template <class TX, class TY, class TZ>
std::istream& operator>>(std::istream& cin, Triad<TX,TY,TZ> t) {
  return cin >> t.x_ >> t.y_ >> t.z_;
}


